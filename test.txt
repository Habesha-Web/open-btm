####################################################################
package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/labstack/echo/v4"
)

type GraphQLRequest struct {
	Query string      `json:"query"`
	Variables interface{} `json:"variables,omitempty"`
}

func TestGraphQLAPI(t *testing.T) {
	e := echo.New()

	// Setup your GraphQL handler here
	e.POST("/graphql", func(c echo.Context) error {
		// Your GraphQL handler logic
		return nil
	})

	// Define test cases
	tests := []struct {
		name     string
		query    string
		variables interface{}
		expected string
	}{
		{
			name: "Create Sprint",
			query: `mutation($input: CreateSprintInput!) {
				createsprint(input: $input) {
					id
					name
					description
				}
			}`,
			variables: map[string]interface{}{
				"input": map[string]interface{}{
					"name":        "Sprint 1",
					"description": "First sprint",
				},
			},
			expected: `"Sprint 1"`,
		},
		{
			name: "Retrieve Sprints",
			query: `query($page: Int!, $size: Int!) {
				sprints(page: $page, size: $size) {
					id
					name
					description
				}
			}`,
			variables: map[string]interface{}{
				"page": 1,
				"size": 10,
			},
			expected: `"Sprint 1"`, // Adjust this based on your expected data
		},
		// Add more tests for other queries and mutations...
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			body := GraphQLRequest{
				Query:     tt.query,
				Variables: tt.variables,
			}
			jsonBody, _ := json.Marshal(body)
			req := httptest.NewRequest(http.MethodPost, "/graphql", bytes.NewBuffer(jsonBody))
			req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)

			rec := httptest.NewRecorder()
			e.ServeHTTP(rec, req)

			if rec.Code != http.StatusOK {
				t.Errorf("expected status code 200, got %d", rec.Code)
			}

			if !bytes.Contains(rec.Body.Bytes(), []byte(tt.expected)) {
				t.Errorf("expected response to contain %q, got %s", tt.expected, rec.Body.String())
			}
		})
	}
}

####################################################################
####################################################################
